# Generated by Django 5.1.3 on 2024-11-29 08:25

from __future__ import annotations

from typing import TYPE_CHECKING

from django.db import migrations

from weblate_web.utils import PAYMENTS_ORIGIN

if TYPE_CHECKING:
    from django.db.backends.base.schema import BaseDatabaseSchemaEditor
    from django.db.migrations.state import StateApps


def update_users(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    donation_model = apps.get_model("weblate_web", "Donation")
    service_model = apps.get_model("weblate_web", "Service")
    user_model = apps.get_model("auth", "User")
    customer_model = apps.get_model("payments", "Customer")

    print()

    # Migrate Donation assignment to customer
    for donation in donation_model.objects.select_related("user", "customer"):
        if donation.customer is None:
            donation.customer = customer_model.objects.create(user_id=-1)
            donation.save(update_fields=["customer"])
        donation.customer.users.add(donation.user)

    # Migrate Service assignment to customer
    for service in service_model.objects.select_related("customer").prefetch_related(
        "users"
    ):
        if service.customer is None:
            service.customer = customer_model.objects.create(user_id=-1)
            service.save(update_fields=["customer"])
        service.customer.users.add(*service.users.all())

    # Migrate user_id from Customer
    for customer in customer_model.objects.filter(
        origin=PAYMENTS_ORIGIN, user_id__gt=0
    ):
        try:
            user = user_model.objects.get(pk=customer.user_id)
        except user_model.DoesNotExist:
            print(
                f"WARNING: user {customer.user_id} for {customer.name} ({customer.pk}) does not exist!"
            )
            continue
        customer.users.add(user)


class Migration(migrations.Migration):
    dependencies = [
        ("payments", "0039_customer_users"),
        ("weblate_web", "0031_fill_in_customer"),
    ]

    operations = [
        migrations.RunPython(update_users, elidable=True),
    ]
