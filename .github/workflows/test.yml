name: Test

on: [push, pull_request]

jobs:
  test:
    services:
      postgres:
        image: postgres:17.5-alpine@sha256:6567bca8d7bc8c82c5922425a0baee57be8402df92bae5eacad5f01ae9544daa
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: weblate
          POSTGRES_DB: weblate
      mariadb:
        image: mariadb:10.11.13@sha256:24bb6e3d8e46f4581ddcc2b2c22fd78c99c77ac4e3fb7c9aba3a5c4c4d934ca2
        env:
          MARIADB_ROOT_PASSWORD: weblate
          MARIADB_DATABASE: weblate
        ports:
        - 3306:3306
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version:
        - '3.11'
        - '3.12'
        - '3.13'
        database:
        - sqlite
        - mariadb
        - postgresql
    name: Python ${{ matrix.python-version }}, ${{ matrix.database }}
    env:
      CI_DATABASE: ${{ matrix.database }}
    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      with:
        persist-credentials: true
        fetch-depth: 0
    - name: Install apt dependencies
      # gettext is needed as Django uses msgfmt to compile MO files
      run: |
        sudo apt update
        sudo apt install gettext
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: ${{ matrix.python-version }}
    - uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3
      with:
        cache-suffix: test
    - name: Install pip dependencies
      run: uv pip install --system -r requirements-dev.txt
    - name: Compile MO files
      run: ./scripts/generate-locales
    - name: Collect static files
      run: ./manage.py collectstatic
    - name: Django checks
      run: ./manage.py check
    - name: Test with Django
      run: |
        pytest --junitxml=junit.xml weblate_web
        cp .coverage .coverage.pytest
    - name: Migrations
      run: |
        # First version with database backends tests
        git checkout 7ba420b18ec3c7d32fb71823335e068f15b96855
        ./manage.py migrate
        ./manage.py shell -c 'customer = Customer.objects.create(user_id=-1); payment = Payment.objects.create(customer=customer, amount=1); Payment.objects.create(customer=customer, amount=1, repeat=payment)'
        EXISTING_PK=$(./manage.py dumpdata payments.Payment | jq '.[].pk' | tr -d - | sort)
        EXISTING_REPEAT=$(./manage.py dumpdata payments.Payment | jq '.[].fields.repeat' | tr -d - | sort)
        git checkout "$GITHUB_SHA"
        coverage run ./manage.py migrate
        NEW_PK=$(./manage.py dumpdata payments.Payment | jq '.[].pk' | tr -d - | sort)
        NEW_REPEAT=$(./manage.py dumpdata payments.Payment | jq '.[].fields.repeat' | tr -d - | sort)
        if [ "$NEW_PK" != "$EXISTING_PK" ] ; then
          echo "Migration failed (pk): $NEW_PK != $EXISTING_PK"
          exit 1
        fi
        if [ "$NEW_REPEAT" != "$EXISTING_REPEAT" ] ; then
          echo "Migration failed (repeat): $NEW_REPEAT != $EXISTING_REPEAT"
          exit 1
        fi
    - name: Coverage
      run: |
        coverage combine
        coverage xml
    - uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        flags: unittests
        name: Python ${{ matrix.python-version }}
    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
permissions:
  contents: read
